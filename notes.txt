-each track will NOT have its own sequencer
-there will be one sequencer
-drumMachine class will keep track of the currently selected drum cell
-when record mode is initiated, 
  •the drum-cell-indicator will illuminate for the active cells for the
   sound
  •when drum cells are clicked in record mode, they will patch the current 
   sound into the sequencer
  
  -have the ui file be a controller that links user interactions to 
   functions in the drumMachine


-write logic for the edit mode in ui.js in `mapSoundToCell`


-go through all the steps and check to see which have true values for the 
 currentSound, store the indices in an array
  •go over the array of indices and toggle an `armed` class for the ones that 
   are true

-drumMachine functions that are called from the controller that require UI changes,
 can return promises that then deal with UI changes in the Controller, with functions
 represented in the View

 -make the info-display a form that will change the state of the drum machine
  via text for the tempo and a list for the drumMachine cells

-vanilla JS can be leveraaged to create the whole UI as React does, alternatively,
 a hybrid approach can be used that sets up the general structure of the app 
 (such as the list of drums for the currentSample select element, or the cells
 of the sequencer)

 todo:
• fix the play function to use setInterval rather than setTimeout for more accurate
  temp fixed playback
  - create a property that belongs to the drumMachine that will store the instance
    of setInterval so that it can be referenced and cancelled and reassigned when
    the tempo changes
• volume knob for each track 
  - have each knob tap into their respective Howler instance that is in the 
    drum machines drums property
• master volume 
  - have a knob map to `Howler.volume()`)
