-each track will NOT have its own sequencer
-there will be one sequencer
-drumMachine class will keep track of the currently selected drum cell
-when record mode is initiated, 
  •the drum-cell-indicator will illuminate for the active cells for the
   sound
  •when drum cells are clicked in record mode, they will patch the current 
   sound into the sequencer
  
  -have the ui file be a controller that links user interactions to 
   functions in the drumMachine


-write logic for the edit mode in ui.js in `mapSoundToCell`


-go through all the steps and check to see which have true values for the 
 currentSound, store the indices in an array
  •go over the array of indices and toggle an `armed` class for the ones that 
   are true

-drumMachine functions that are called from the controller that require UI changes,
 can return promises that then deal with UI changes in the Controller, with functions
 represented in the View

 -make the info-display a form that will change the state of the drum machine
  via text for the tempo and a list for the drumMachine cells

-vanilla JS can be leveraaged to create the whole UI as React does, alternatively,
 a hybrid approach can be used that sets up the general structure of the app 
 (such as the list of drums for the currentSample select element, or the cells
 of the sequencer)

 -create base html layout that will then be populated with the proper elements
  corresponding to the drumMachine and then have classes be applied to them
  that represent the different drumMachines

-all createView methods will laydown the base html necessary for their view
  • all views will have the same base components

-What components will all drumMachines have in common
  • sequencer
  • title
  • subtitle
  • step cell (808, 909 are the same)

-Would it be possible to store the html for each drumMachine as 
  a javascript string